// GET FORMATTED TIMES FROM NTP SERVER
// https://www.pool.ntp.org/zone/vn

#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <stdio.h>

#include <DHT.h>
#include <SPI.h>
#include "Adafruit_GFX.h"
#include "Max72xxPanel.h"

// Choose pin CS
int pinCS = D4;

int numberOfHorizontalDisplays = 4;
int numberOfVerticalDisplays = 1;
const byte buffer_size = 45;
char time_value[buffer_size];
char temp_value[buffer_size];

Max72xxPanel matrix = Max72xxPanel(pinCS, numberOfHorizontalDisplays, numberOfVerticalDisplays);

int wait = 70;
int spacer = 1;
int width = 4 + spacer;

#define DHTPIN 5
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

//Tao giao thuc udp
WiFiUDP wUdp;
NTPClient NTPc(wUdp, "1.asia.pool.ntp.org", 7*3600);

String sDataTest = " ";

void setup()
{
  Serial.begin(115200);

  String sWifiName = "MinhTan 2.4"; // Wifi's name
  String sWifiPass = "21042001";  // Wifi's pass
  
  WiFi.begin("MinhTan 2.4", "21042001");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.println("Connecting");
  }
  //Serial.println();
  Serial.println("Connected");

  NTPc.begin();
  dht.begin();
  
  matrix.setIntensity(2); // Use a value between 0 and 15 for brightness
  matrix.setRotation(0, 1);    // The first display is position upside down
  matrix.setRotation(1, 1);    // The first display is position upside down
  matrix.setRotation(2, 1);    // The first display is position upside down
  matrix.setRotation(3, 1);    // The first display is position upside down
}

void loop()
{
  // read temperature as Celsius
  float fCelsius = dht.readTemperature();
  // read temperature as Fahrenheit
  //float fFahrenheit = dht.readTemperature(true);
  float fHumidity = dht.readHumidity();

  String  sTime = NTPc.getFormattedTime();
  NTPc.update();

  PrintTimes(sTime);
  delay(40000);
  if (!(isnan(fCelsius) || isnan(fHumidity)))
  {
    Clear();
    PrintTemperatureAndHumidity(fCelsius, fHumidity);
    //delay(5000);
  }
}

void PrintTimes(String sTime)
{
  sTime.trim(); //Delete all space in string sTime;
 
  //delay(1000);
  Serial.println(sTime);
  //Serial.println(NTPc.getFormattedTime());  
  sTime.toCharArray(time_value, 10);
  matrix.drawChar(2, 0, time_value[0], HIGH, LOW, 1); // H
  matrix.drawChar(8, 0, time_value[1], HIGH, LOW, 1); // HH
  matrix.drawChar(13, 0, time_value[2], HIGH, LOW, 1); // HH:
  matrix.drawChar(18, 0, time_value[3], HIGH, LOW, 1); // HH:M
  matrix.drawChar(24, 0, time_value[4], HIGH, LOW, 1); // HH:MM
  matrix.write();
}

void Clear()
{
  String tempClear = "         ";
  char tClear[10];

  matrix.drawChar(0, 0, tClear[0], HIGH, LOW, 1);
  matrix.drawChar(5, 0, tClear[0], HIGH, LOW, 1);
  matrix.drawChar(10, 0, tClear[0], HIGH, LOW, 1);
  matrix.drawChar(15, 0, tClear[0], HIGH, LOW, 1);
  matrix.drawChar(20, 0, tClear[0], HIGH, LOW, 1);
  matrix.drawChar(25, 0, tClear[0], HIGH, LOW, 1);
  matrix.write();

  //print to check clear matrix
  Serial.println("clearMatrix");
}

void PrintTemperatureAndHumidity(float fTemp, float fHum)
{
  String sTemp = String(fTemp, 0);
  String sHum = String(fHum, 0);

  sTemp = sTemp + "`C";
  sHum = sHum + "%";

  // Print temperature and humidity in serial monitor for check bug
  Serial.println(sTemp);
  Serial.println(sHum);
  
  sHum.toCharArray(temp_value, 5);
  matrix.drawChar(3, 0, temp_value[0], HIGH, LOW, 1); // H
  matrix.drawChar(9, 0, temp_value[1], HIGH, LOW, 1); // HH
  matrix.drawChar(16, 0, temp_value[2], HIGH, LOW, 1); // HH:
  //matrix.drawChar(17, 0, temp_value[3], HIGH, LOW, 1); // HH:M
  //matrix.drawChar(24, 0, temp_value[4], HIGH, LOW, 1); // HH:MM
  matrix.write();
  delay(1000);
  Clear();
  sTemp.toCharArray(temp_value, 5);
  matrix.drawChar(3, 0, temp_value[0], HIGH, LOW, 1); // H
  matrix.drawChar(9, 0, temp_value[1], HIGH, LOW, 1); // HH
  matrix.drawChar(16, 0, temp_value[2], HIGH, LOW, 1); // HH:
  matrix.drawChar(22, 0, temp_value[3], HIGH, LOW, 1);
  matrix.write();
  delay(1000); 
}
